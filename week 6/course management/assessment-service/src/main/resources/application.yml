server:
  port: 8084

spring:
  application:
    name: assessment-service
  datasource:
    url: jdbc:postgresql://assessment-db:5432/assessment_db
    username: postgres
    password: password
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-timeout: 30000
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
  main:
    allow-bean-definition-overriding: true
  sleuth:
    sampler:
      probability: 1.0  # 100% sampling for demo; reduce in production

# Redis Configuration
redis:
  host: redis
  port: 6379
  timeout: 2000ms
  lettuce:
    pool:
      max-active: 8
      max-idle: 8
      min-idle: 0

# RabbitMQ Configuration
rabbitmq:
  host: rabbitmq
  port: 5672
  username: guest
  password: guest
  virtual-host: /
  listener:
    simple:
      concurrency: 3
      max-concurrency: 10
      prefetch: 1
      default-requeue-rejected: false

# WebSocket Configuration
websocket:
  allowed-origins: "*"
  endpoint: /ws
  broker:
    prefix: /topic
    user-prefix: /user
    application-prefix: /app

# Logging
logging:
  level:
    com.lms.assessmentservice: DEBUG
    org.springframework.web.socket: DEBUG
    org.springframework.messaging: DEBUG

resilience4j:
  circuitbreaker:
    instances:
      assessmentServiceCB:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        waitDurationInOpenState: 10s
        failureRateThreshold: 50
        eventConsumerBufferSize: 10

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,circuitbreakers
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true
  endpoint:
    health:
      show-details: always 