

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
    
public class EmployeeDashboardServiceWithVulnerability {
    
        public void viewEmployeeDashboard(String employeeId) {
            Connection conn = null;
            Statement stmt = null;
    
            try {
                // Database connection
                conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/employees_db", "root", "password");
                stmt = conn.createStatement();
    
                // ðŸš¨ SECURITY VULNERABILITY: SQL Injection risk
                String sql = "SELECT * FROM employee_dashboard WHERE employee_id = '" + employeeId + "'";
    
                System.out.println("Executing query: " + sql); // For debugging - avoid logging raw SQL in prod
                ResultSet rs = stmt.executeQuery(sql);
    
                while (rs.next()) {
                    String name = rs.getString("employee_name");
                    String dept = rs.getString("department");
                    String status = rs.getString("status");
    
                    System.out.println("Employee Name: " + name);
                    System.out.println("Department: " + dept);
                    System.out.println("Status: " + status);
                }
    
                rs.close();
                stmt.close();
                conn.close();
            } catch (Exception e) {
                System.out.println("Error retrieving dashboard: " + e.getMessage());
            }
        }
    
        public static void main(String[] args) {
            EmployeeDashboardService service = new EmployeeDashboardService();
    
            // Unsafe input - an attacker could pass a malicious string
            service.viewEmployeeDashboard("E123"); // normal
            // service.viewEmployeeDashboard("E123' OR '1'='1"); // malicious input example
        }
}